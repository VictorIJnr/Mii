#bu-overview {
    display: flex;

    flex: 1;
    flex-direction: column;
    align-items: center;

    text-align: center;
}

#bu-overview video {
    width: 100%;
}

#bu-overview > p {
    margin-top: 1.5vh;
    margin-bottom: 0vh;
}

#bu-overview > p > span {
    color: var(--dark-theme-orange);
    
    font-style: italic;
    font-weight: bold;
}

#bu-intro {
    position: relative;
    display: flex;

    flex: 1;
    flex-direction: column;
    align-items: center;

    max-width: 100%;

    text-align: center;
}

#bu-intro > #bu-intro-video-wrapper,
#bu-intro-video-wrapper > #bu-intro-video {
    position: relative;
}

#bu-intro-video-wrapper > #bu-intro-video video {
    max-width: 100%;
}

#bu-mini-player-overlay {
    position: absolute;

    top: 0;
    
    height: 100%;
    width: 100%;

    z-index: 32;
}

#bu-mini-player-overlay > #bu-overlay-colour {
    position: absolute;

    top: 0;

    height: 100%;
    width: 100%;

    background-color: var(--bg-colour);
    opacity: 0.7;

    z-index: -1;
}

#bu-mini-player-overlay > #bu-overlay-content {
    display: flex;

    height: 100%;
}

#bu-mini-player-overlay > #bu-overlay-content > div {
    display: flex;
    flex: 1;

    flex-direction: column;
    justify-content: center;

    text-align: left;

    opacity: 0.9;
}

#bu-mini-player-overlay > #bu-overlay-content > div > * {
    margin: 0;
}

#bu-intro-classification {
    display: flex;
}

#bu-intro-classification > #bu-classification-overview {
    display: flex;

    flex: 3;
    flex-direction: column;
    
    justify-content: center;
    align-items: center;
}

#bu-intro-classification > #bu-classification-overview > h2 {
    margin-top: 0;
    margin-bottom: 2.5vh;
}

#bu-intro-classification > #bu-classification-circles {
    --animation-duration: 10s;
    --circle-diameter: 25px;
    --circle-margin: calc(var(--circle-diameter) / 4);
    
    position: relative;
    display: flex;
    
    flex: 1;
    flex-direction: column;

    align-items: center;
}

#bu-classification-circles .bu-classification-circle {
    position: relative;

    height: var(--circle-diameter);
    width: var(--circle-diameter);

    border-radius: 50%;
    opacity: 0.75;
}

#bu-classification-circles .bu-classification-circle:first-of-type {
    animation-duration: calc(var(--animation-duration) / 5);
}

#bu-classification-circles .bu-classification-circle:last-of-type {
    /* animation-delay: calc(var(--animation-duration) / 2); */
}

#bu-classification-circles .bu-classification-circle.rotating-circle {
    animation-name: circle-glow, circle-rotate;
    animation-duration: var(--animation-duration), calc(var(--animation-duration) / 3);
    animation-timing-function: ease-in-out, linear;
    animation-iteration-count: infinite, infinite;
    animation-direction: alternate, normal;

    transform-origin: 150% 150%;
}

#bu-classification-circles .bu-classification-circle.classifying-circle {
    --classified-top-pos: 0;
    --classified-right-pos: 0;
    --classified-initial-top-pos: 0;
    --classified-initial-right-pos: var(--circle-diameter);

    animation-name: circle-glow, circle-classify;
    animation-duration: var(--animation-duration), calc(var(--animation-duration) / 3);
    animation-timing-function: ease-in-out, ease-in-out;
    animation-iteration-count: infinite;
    animation-direction: alternate;
}

#bu-classification-circles .bu-classification-circle.classifying-circle.classified-top-row {
    --classified-top-pos: 0;
}

#bu-classification-circles .bu-classification-circle.classifying-circle.classified-bottom-row {
    --classified-top-pos: var(--circle-diameter);
    
    /*
        need the circle groups to have a height and a width equal to the full size of the parent.
        each group will need to be absolutely positioned
        each will need to have a selector, so each circle can be initially positioned relative to the index of the circle group.
    */

    /* display: none; */
}

#bu-classification-circles .bu-classification-circle.classifying-circle.classified-left-col {
    --classified-right-pos: calc(-100% + (var(--circle-diameter) * 2) + var(--circle-margin));
}

#bu-classification-circles .bu-classification-circle.classifying-circle.classified-right-col {
    --classified-right-pos: calc(-100% + (var(--circle-diameter)));
}

#bu-classification-circles > .bu-circles-group {
    position: absolute;

    top: 0;
    left: 0;

    height: 100%;
    width: 100%;
}

#bu-classification-circles > .bu-circles-group > .bu-classification-circle.classifying-circle:first-of-type {
    top: 0;
}

#bu-classification-circles > .bu-circles-group > .bu-classification-circle.classifying-circle:nth-of-type(2) {
    /* --classified-initial-top-pos: var(--circle-diameter); */
}

@keyframes circle-glow {
    0% {
        background-color: var(--dark-theme-orange);
    }

    20% {
        background-color: #EE5253;
    }

    40% {
        background-color: #8C7AE6;
    }

    60% {
        background-color: #0984E3;
    }

    80% {
        background-color: #55EFC4;
    }

    100% {
        background-color: #FFFA65;
    }
}

@keyframes circle-rotate {
    0% {
        transform: rotateZ(0deg);
        top: 0vh;
    }
    
    50% {
        transform: rotateZ(360deg);
    }

    100% {
        transform: rotateZ(720deg);
    }
}

@keyframes circle-classify {
    0% {
        /*
            This is needed, otherwise the animation will do a little jump to the initial position of the circle selector.
            We can't specify the initial position within the selector because 100% refers to the circle's width, not the
            width of the parent element like what we have here.
        */
        top: var(--classified-initial-top-pos);
        /* right: calc(100% - (var(--circle-diameter))); */
        right: 0;
    }
    
    5% {
        top: var(--classified-initial-top-pos);
        /* right: calc(100% - (var(--circle-diameter))); */
        right: 0;
    }

    90% {
        /* 
            NGL, I don't know why right has to be negative here.
            Perhaps it has to do with a row-reverse, but I had it working with positive numbers earlier.
        */

        top: calc(100% - var(--classified-top-pos));
        right: var(--classified-right-pos);
    }

    100% {
        top: calc(100% - var(--classified-top-pos));
        right: var(--classified-right-pos);
    }
}